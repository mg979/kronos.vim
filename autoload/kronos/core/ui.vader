Before:
  let g_database = resolve(expand('<sfile>:h') . '/kronos.db')
  let g_dateref  = 1526397300 "15/05/2018 15:15 UTC
  let g_dueref   = 1526428800 "16/05/2018 00:00 UTC

  let g_task = {
   \'id': 1,'desc': 'test 42','tags': ['cli', 'a', 'b-c'],'due': g_dueref,
   \'active': 0,'last_active': 0,'worktime': 0,'done': 0,
  \}

  let g_taskupdate = {
   \'id': 1,'desc': 'test','tags': ['cli', 'b-c', 'c'],
   \'due': g_dueref + 3600 * 24 * 2,'active': 0,'last_active': 0,
   \'worktime': 0,'done': 0,
  \}

  let g_taskstart = {
   \'id': 1,'desc': 'test 42','tags': ['cli', 'a', 'b-c'],
   \'due': g_dueref,'active': g_dateref + 3600,'last_active': 0,
   \'worktime': 0,'done': 0,
  \}

  let g_taskstop = {
   \'id': 1,'desc': 'test 42','tags': ['cli', 'a', 'b-c'],
   \'due': g_dueref,'active': 0,'last_active': g_dateref + 3600 * 2,
   \'worktime': 3600,'done': 0,
  \}

  let g_taskdone = {
   \'id': 1 . (g_dateref + 3600 * 2),'desc': 'test 42',
   \'tags': ['cli', 'a', 'b-c'],'due': g_dueref,'active': 0,
   \'last_active': g_dateref + 3600 * 2,'worktime': 3600,
   \'done': g_dateref + 3600 * 2,
  \}

  let g_taskundone = {
   \'id': 1,'desc': 'test 42',
   \'tags': ['cli', 'a', 'b-c'],'due': g_dueref,'active': 0,
   \'last_active': g_dateref + 3600 * 2,'worktime': 3600,
   \'done': 0,
  \}

After:
  call kronos#core#database#Purge(g_database)
  unlet g_database g_dateref g_task g_taskupdate g_taskstart g_taskstop

# ---------------------------------------------------------------------- # Add #

Execute (Add):
  call kronos#core#ui#Add(g_database, g_dateref, '+cli test +a +b-c :16 42')

Then (should add new task):
  AssertEqual [g_task], kronos#core#database#Read(g_database)

# ------------------------------------------------------------------- # Update #

Execute (Update):
  call kronos#core#ui#Add(g_database, g_dateref, '+cli test +a +b-c :16 42')
  call kronos#core#ui#Update(g_database, g_dateref, '1 +cli test :18 -a +b-c +c')
  call kronos#core#ui#Update(g_database, g_dateref, '1')

Then (should update a task):
  AssertEqual [g_taskupdate], kronos#core#database#Read(g_database)

# -------------------------------------------------------------------- # Start #

Execute (Start):
  call kronos#core#ui#Add(g_database, g_dateref, '+cli test +a +b-c :16 42')
  call kronos#core#ui#Start(g_database, g_dateref + 3600, 1)

Then (should start a task):
  AssertEqual [g_taskstart], kronos#core#database#Read(g_database)
  AssertThrow kronos#core#ui#Start(g_database, g_dateref, 1)

# --------------------------------------------------------------------- # Stop #

Execute (Stop):
  call kronos#core#ui#Add(g_database, g_dateref, '+cli test +a +b-c :16 42')
  call kronos#core#ui#Start(g_database, g_dateref + 3600, 1)
  call kronos#core#ui#Stop(g_database, g_dateref + 3600 * 2, 1)

Then (should stop a task):
  AssertEqual [g_taskstop], kronos#core#database#Read(g_database)
  AssertThrow kronos#core#ui#Stop(g_database, g_dateref, 1)

# --------------------------------------------------------------------- # Done #

Execute (Done):
  let newid = 1 . (g_dateref + 3600 * 2)
  call kronos#core#ui#Add(g_database, g_dateref, '+cli test +a +b-c :16 42')
  call kronos#core#ui#Start(g_database, g_dateref + 3600, 1)
  call kronos#core#ui#Done(g_database, g_dateref + 3600 * 2, 1)

Then (should mark as done a task):
  AssertEqual [g_taskdone], kronos#core#database#Read(g_database)
  AssertThrow kronos#core#ui#Done(g_database, g_dateref, 1)

  unlet newid

# ------------------------------------------------------------------- # Undone #

Execute (Undone):
  let newid = 1 . (g_dateref + 3600 * 2)
  call kronos#core#ui#Add(g_database, g_dateref, '+cli test +a +b-c :16 42')
  call kronos#core#ui#Start(g_database, g_dateref + 3600, 1)
  call kronos#core#ui#Done(g_database, g_dateref + 3600 * 2, 1)
  call kronos#core#ui#Undone(g_database, newid)

Then (should mark as undone a task):
  AssertEqual [g_taskundone], kronos#core#database#Read(g_database)
  AssertThrow kronos#core#ui#Undone(g_database, 1)

  unlet newid

# ----------------------------------------------------------------- # Worktime #

Execute (Worktime):
  call kronos#core#database#Write(g_database, [
    \{'id': 1, 'done': 0               , 'tags': []        , 'worktime': 30},
    \{'id': 2, 'done': g_dateref       , 'tags': ['a']     , 'worktime': 0 },
    \{'id': 3, 'done': g_dateref + 3600, 'tags': ['a', 'b'], 'worktime': 60},
  \])

  let scenarios = [
    \[90, ''   ],
    \[60, 'a'  ],
    \[60, 'b'  ],
    \[60, 'a b'],
  \]

Then (should calculate worktime):
  for [expected, tags] in scenarios
    AssertEqual expected, kronos#core#ui#Worktime(g_database, g_dateref, tags)
  endfor

  unlet scenarios

